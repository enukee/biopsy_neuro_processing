@page "/series-processing"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Анализ изображений</PageTitle>
<link rel="stylesheet" href="app.css">
<script src="js/loadingAnimation.js"></script>

<h1>Анализ серии изображений</h1>

<button class="custom-button" @onclick="ProcessImages" disabled="@isProcessBtnDisabled">
    Обработать изображения
</button>

<button class="custom-button" @onclick="DownloadProcessedImage" style="margin-left:20px;" disabled="@isDownloadBtnDisabled">
    <img src="box-arrow-down.svg" width="20" height="20">
</button>
<br>

<DropArea LoadImage="LoadImages" />

<ProgressBar />

@code {
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private List<string> imageDataUrls = new List<string>();
    private List<string> processedImageDataUrls = new List<string>();
    private Report reports = new Report();
    private string pdgReport;

    private int processingProgress = 0;
    bool isDownloadBtnDisabled = true;
    bool isProcessBtnDisabled = true;

    private async Task LoadImages(List<IBrowserFile> files)
    {
        selectedFiles = files;
        imageDataUrls.Clear();

        foreach (var file in selectedFiles)
        {
            try
            {
                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream(104857600).CopyToAsync(memoryStream);
                    var buffer = memoryStream.ToArray();
                    var imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                    imageDataUrls.Add(imageDataUrl);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error reading file: {ex.Message}");
            }
        }

        isProcessBtnDisabled = false;
        StateHasChanged();
        Console.WriteLine("State has changed called.");
    }

    private async Task ProcessImages()
    {
        Console.WriteLine("image processing");

            processingProgress = 0;
            await JSRuntime.InvokeVoidAsync("startProgress", 0);
            int step = 100 / selectedFiles.Count;

        try
        {
            foreach (IBrowserFile file in selectedFiles)
            {
                // Обработка файла
                var response = await DataProcessor.ProcessingImage(Http, file);

                processedImageDataUrls.Add(response.imageUrl);
                if (response.report.ObjectsCenter != null && response.report.ObjectsArea != null)
                {
                    reports.AddReport(response.report);
                }

                processingProgress += step;
                await JSRuntime.InvokeVoidAsync("startProgress", processingProgress);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка обработки: {ex.Message}");
        }
            await JSRuntime.InvokeVoidAsync("startProgress", 100);
            isDownloadBtnDisabled = false;
            await UploadPDFReport();
        }

    private async Task UploadPDFReport()
    {
        try
        {
            pdgReport = await DataProcessor.UploadPDFReport(Http, reports);

            isDownloadBtnDisabled = false;
            // Очистка кеша отчётов
            reports.Clear();
            }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Ошибка при выполнении запроса: {ex.Message}");
        }
    }

    private async Task DownloadProcessedImage()
    {
        if (!isDownloadBtnDisabled && !string.IsNullOrEmpty(pdgReport))
        {
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", "report.pdf", pdgReport);
        }
    }
}
